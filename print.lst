


ARM Macro Assembler    Page 1 


    1 00000000         ; Print.s
    2 00000000         ; Student names: Ramya Ramachandran and Reece Stevens
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         ; Runs on LM4F120 or TM4C123
    5 00000000         ; EE319K lab 7 device driver for any LCD
    6 00000000         ;
    7 00000000         ; As part of Lab 7, students need to implement these LCD
                       _OutDec and LCD_OutFix
    8 00000000         ; This driver assumes two low-level LCD functions
    9 00000000         ; LCD_OutChar   outputs a single 8-bit ASCII character
   10 00000000         ; LCD_OutString outputs a null-terminated string 
   11 00000000         
   12 00000000                 IMPORT           LCD_OutChar
   13 00000000                 IMPORT           LCD_OutString
   14 00000000                 EXPORT           LCD_OutDec
   15 00000000                 EXPORT           LCD_OutFix
   16 00000000         
   17 00000000                 PRESERVE8
   18 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   19 00000000                 THUMB
   20 00000000         
   21 00000000 0000000E 
                       quo     EQU              14
   22 00000000 0000000F 
                       rem     EQU              15
   23 00000000         
   24 00000000         ;-----------------------LCD_OutDec----------------------
                       -
   25 00000000         ; Output a 32-bit number in unsigned decimal format
   26 00000000         ; Input: R0 (call by value) 32-bit unsigned number
   27 00000000         ; Output: none
   28 00000000         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   29 00000000         
   30 00000000 00000000 
                       Digit   EQU              0           ; BIND local variab
                                                            le 'Digit', which i
                                                            s defined as an off
                                                            set of the stack po
                                                            inter
   31 00000000         
   32 00000000         LCD_OutDec
   33 00000000         
   34 00000000         ; binding phase
   35 00000000 00000000 
                       char    EQU              0
   36 00000000 0000000A 
                       num     EQU              10          ; 32-bit unsigned n
                                                            umber in R0-this lo
                                                            cal variable will b
                                                            e at the address SP
                                                             + 10
   37 00000000         ; allocation phase
   38 00000000 E92D 4FF1       PUSH             {R4-R11,R0,LR}
   39 00000004 B084            SUB              SP, #16     ; allocate 4 32-bit
                                                             variables
   40 00000006         ; access phase



ARM Macro Assembler    Page 2 


   41 00000006 F8CD 000A       STR              R0, [SP, #num] ; input is store
                                                            d on the stack-num=
                                                            input
   42 0000000A F04F 010A       MOV              R1, #10     ; for Mod
   43 0000000E F04F 0400       MOV              R4, #0      ; counter of place 
                                                            values
   44 00000012         Mod_Div
   45 00000012 2800            CMP              R0, #0      ; check if input re
                                                            quires Mod fcn or n
                                                            ot
   46 00000014 D00B            BEQ              Next
   47 00000016 F000 F8E2       BL               Mod
   48 0000001A F89D 300F       LDRB             R3, [SP, #rem]
   49 0000001E F80D 3004       STRB             R3, [SP, R4] ; remainder is sto
                                                            red on the stack-R4
                                                            =remainder
   50 00000022 F104 0401       ADD              R4, #1      ; increment counter
                                                            
   51 00000026 F89D 300E       LDRB             R3, [SP, #quo]
   52 0000002A 4610            MOV              R0, R2      ; the new quotient 
                                                            becomes the new inp
                                                            ut
   53 0000002C E7F1            B                Mod_Div
   54 0000002E         Next
   55 0000002E         ; some kind of output loop
   56 0000002E F1A4 0401       SUB              R4, #1      ; decrement counter
                                                            
   57 00000032         Output
   58 00000032 F81D 0004       LDRB             R0, [SP, R4] ; R0 = R4 (remaind
                                                            er)
   59 00000036 F100 0030       ADD              R0, #0x30
   60 0000003A F7FF FFFE       BL               LCD_OutChar ; puts character on
                                                             screen
   61 0000003E 2C00            CMP              R4, #0      ; check counter
   62 00000040 DD02            BLE              Done        ; If all remainders
                                                             have been outputte
                                                            d, task is complete
                                                            .
   63 00000042 F1A4 0401       SUB              R4, #1
   64 00000046 E7F4            B                Output
   65 00000048         Done
   66 00000048         ; deallocation phase
   67 00000048 B004            ADD              SP, #16
   68 0000004A E8BD 4FF1       POP              {R4-R11, R0, LR}
   69 0000004E         
   70 0000004E         ; Approach: Convert the decimal number to ASCII, call LC
                       D_OutChar to print digit
   71 0000004E         ; Recursively divide input by 10 to isolate each digit
   72 0000004E B520            PUSH             {R5, LR}
   73 00000050 E92D 1010       PUSH             {R4, R12}
   74 00000054 4601            MOV              R1, R0      ; Copy input to a s
                                                            cratch register
   75 00000056 46EC            MOV              R12, SP     ; Save original Sta
                                                            ck Pointer
   76 00000058 F04F 040A       MOV              R4, #10     ; power of ten offs
                                                            et
   77 0000005C F04F 0530       MOV              R5, #0x30   ; ASCII offset
   78 00000060         
   79 00000060         



ARM Macro Assembler    Page 3 


   80 00000060         
   81 00000060         
   82 00000060         getnum
   83 00000060 B081            ADD              SP, #-4     ; ALLOCATE
   84 00000062 460A            MOV              R2, R1      ; Copy input to oth
                                                            er scratch register
                                                            
   85 00000064 FBB2 F3F4       UDIV             R3, R2, R4
   86 00000068 FB03 F304       MUL              R3, R4      ; Modulus operator:
                                                             R2 % 10
   87 0000006C EBA2 0203       SUB              R2, R2, R3
   88 00000070         ;ADD R2, #0x30   ; Convert digit to ASCII
   89 00000070 9200            STR              R2, [SP, #Digit] ; store in sta
                                                            ck, ACCESS
   90 00000072 FBB1 F1F4       UDIV             R1, R4      ; move to next deci
                                                            mal place
   91 00000076 2900            CMP              R1, #0      ; check if last num
                                                            ber is zero
   92 00000078 D007            BEQ              read
   93 0000007A 290A            CMP              R1, #10
   94 0000007C D300            BLO              printOutDec ; If number is less
                                                             than 10, ready to 
                                                            begin printing
   95 0000007E E7EF            B                getnum      ; Else, continue to
                                                             isolate digits
   96 00000080         
   97 00000080         
   98 00000080         printOutDec
   99 00000080         
  100 00000080 F101 0130       ADD              R1, #0x30   ; convert last digi
                                                            t to ASCII
  101 00000084 4608            MOV              R0, R1      ; move to R0
  102 00000086 F7FF FFFE       BL               LCD_OutChar ; write to screen
  103 0000008A 9800    read    LDR              R0, [SP, #Digit] ; load next nu
                                                            mber from stack (al
                                                            ready ASCII formatt
                                                            ed)
  104 0000008C F100 0030       ADD              R0, #0x30   ; Convert to ASCII
  105 00000090 F7FF FFFE       BL               LCD_OutChar ; write to screen
  106 00000094 B001            ADD              SP, #4      ; DEALLOCATE the di
                                                            git from the stack
  107 00000096 45EC            CMP              R12, SP     ; compare frame poi
                                                            nter and stack poin
                                                            ter
  108 00000098 D1F7            BNE              read        ; if not equal, sti
                                                            ll values in stack;
                                                             continue reading.
  109 0000009A         
  110 0000009A E8BD 1010       POP              {R4, R12}
  111 0000009E E8BD 4001       POP              {R0, LR}
  112 000000A2 4770            BX               LR
  113 000000A4         ;* * * * * * * * End of LCD_OutDec * * * * * * * *
  114 000000A4         
  115 000000A4         ; -----------------------LCD _OutFix--------------------
                       --
  116 000000A4         ; Output characters to LCD display in fixed-point format
                       
  117 000000A4         ; unsigned decimal, resolution 0.001, range 0.000 to 9.9
                       99



ARM Macro Assembler    Page 4 


  118 000000A4         ; Inputs:  R0 is an unsigned 32-bit number
  119 000000A4         ; Outputs: none
  120 000000A4         ; E.g., R0=0,    then output "0.000 "
  121 000000A4         ;       R0=3,    then output "0.003 "
  122 000000A4         ;       R0=89,   then output "0.089 "
  123 000000A4         ;       R0=123,  then output "0.123 " 
  124 000000A4         ;       R0=9999, then output "9.999 "
  125 000000A4         ;       R0>9999, then output "*.*** "
  126 000000A4         ; Invariables: This function must not permanently modify
                        registers R4 to R11
  127 000000A4         
  128 000000A4         LCD_OutFix
  129 000000A4         
  130 000000A4         ; binding phase
  131 000000A4 00000000 
                       fix     EQU              0
  132 000000A4 00000004 
                       char1   EQU              4
  133 000000A4 00000005 
                       dec     EQU              5
  134 000000A4 00000006 
                       char2   EQU              6
  135 000000A4 00000007 
                       char3   EQU              7
  136 000000A4 00000008 
                       char4   EQU              8
  137 000000A4 0000002E 
                       dot     EQU              0x2E
  138 000000A4 0000002A 
                       ast     EQU              0x2A
  139 000000A4 0000270F 
                       limit   EQU              9999
  140 000000A4         ; allocation phase
  141 000000A4 E92D 4FF1       PUSH             {R4-R11, R0, LR}
  142 000000A8 F242 710F       LDR              R1, =limit
  143 000000AC 4288            CMP              R0, R1
  144 000000AE B084            SUB              SP, #16     ; allocate space on
                                                             stack
  145 000000B0 D233            BHS              BigNum
  146 000000B2         ; access phase
  147 000000B2 9000            STR              R0, [SP, #fix] ; store the inpu
                                                            t into fix
  148 000000B4 F44F 717A       MOV              R1, #1000
  149 000000B8 F000 F891       BL               Mod
  150 000000BC F102 0430       ADD              R4, R2, #0x30
  151 000000C0 F88D 4004       STRB             R4, [SP, #char1] ; store most s
                                                            ignificant digit (8
                                                             bits) to char1
  152 000000C4 4618            MOV              R0, R3
  153 000000C6 F04F 0164       MOV              R1, #100
  154 000000CA F000 F888       BL               Mod
  155 000000CE F102 0430       ADD              R4, R2, #0x30
  156 000000D2 F88D 4006       STRB             R4, [SP, #char2]
  157 000000D6 4618            MOV              R0, R3
  158 000000D8 F04F 010A       MOV              R1, #10
  159 000000DC F000 F87F       BL               Mod
  160 000000E0 F102 0430       ADD              R4, R2, #0x30
  161 000000E4 F88D 4007       STRB             R4, [SP, #char3]
  162 000000E8 F103 0430       ADD              R4, R3, #0x30



ARM Macro Assembler    Page 5 


  163 000000EC F88D 4008       STRB             R4, [SP, #char4]
  164 000000F0         ; output fixed-point number
  165 000000F0 F89D 0004       LDRB             R0, [SP, #char1]
  166 000000F4 F7FF FFFE       BL               LCD_OutChar
  167 000000F8 F04F 002E       MOV              R0, #dot
  168 000000FC F7FF FFFE       BL               LCD_OutChar
  169 00000100 F89D 0006       LDRB             R0, [SP, #char2]
  170 00000104 F7FF FFFE       BL               LCD_OutChar
  171 00000108 F89D 0007       LDRB             R0, [SP, #char3]
  172 0000010C F7FF FFFE       BL               LCD_OutChar
  173 00000110 F89D 0008       LDRB             R0, [SP, #char4]
  174 00000114 F7FF FFFE       BL               LCD_OutChar
  175 00000118 E00F            B                Return
  176 0000011A         BigNum
  177 0000011A         ; output "*.***"
  178 0000011A F04F 002A       MOV              R0, #ast
  179 0000011E F7FF FFFE       BL               LCD_OutChar
  180 00000122 F04F 002E       MOV              R0, #dot
  181 00000126 F7FF FFFE       BL               LCD_OutChar
  182 0000012A F04F 002A       MOV              R0, #ast
  183 0000012E F7FF FFFE       BL               LCD_OutChar
  184 00000132 F7FF FFFE       BL               LCD_OutChar
  185 00000136 F7FF FFFE       BL               LCD_OutChar
  186 0000013A         ; deallocation phase
  187 0000013A         Return
  188 0000013A B004            ADD              SP, #16
  189 0000013C E8BD 4FF1       POP              {R4-R11, R0, LR}
  190 00000140 4770            BX               LR
  191 00000142         
  192 00000142         ; Approach: Convert the decimal number to ASCII, call LC
                       D_OutChar to print digit
  193 00000142         ; Recursively divide input by 10 to isolate each digit
  194 00000142         
  195 00000142 B520            PUSH             {R5, LR}
  196 00000144 E92D 1010       PUSH             {R4, R12}
  197 00000148 4601            MOV              R1, R0      ; Copy input to a s
                                                            cratch register
  198 0000014A 46EC            MOV              R12, SP     ; Save original Sta
                                                            ck Pointer
  199 0000014C F04F 040A       MOV              R4, #10     ; power of ten offs
                                                            et
  200 00000150 F242 7510       MOV              R5, #0x2710
  201 00000154 42A8            CMP              R0, R5      ; Check if overflow
                                                             is true
  202 00000156 D211            BHS              overflowFix
  203 00000158 F04F 0500       MOV              R5, #0
  204 0000015C         
  205 0000015C         
  206 0000015C         getnumfix
  207 0000015C B081            ADD              SP, #-4     ; Allocate 4 bytes 
                                                            of space for this l
                                                            oop's version of th
                                                            e local variable Di
                                                            git
  208 0000015E 460A            MOV              R2, R1      ; Copy input to oth
                                                            er scratch register
                                                            
  209 00000160 FBB2 F3F4       UDIV             R3, R2, R4
  210 00000164 FB03 F304       MUL              R3, R4      ; Modulus operator:



ARM Macro Assembler    Page 6 


                                                             R2 % 10
  211 00000168 EBA2 0203       SUB              R2, R2, R3
  212 0000016C 9200            STR              R2, [SP, #Digit] 
                                                            ; store in stack
  213 0000016E FBB1 F1F4       UDIV             R1, R4      ; move to next deci
                                                            mal place
  214 00000172 F105 0501       ADD              R5, #1
  215 00000176 2D04            CMP              R5, #4
  216 00000178 D019            BEQ              printOutFix
  217 0000017A E7EF            B                getnumfix
  218 0000017C         
  219 0000017C         overflowFix
  220 0000017C F04F 002A       MOV              R0, #0x2A
  221 00000180 F7FF FFFE       BL               LCD_OutChar
  222 00000184 F04F 002E       MOV              R0, #0x2E
  223 00000188 F7FF FFFE       BL               LCD_OutChar
  224 0000018C F04F 002A       MOV              R0, #0x2A
  225 00000190 F7FF FFFE       BL               LCD_OutChar
  226 00000194 F04F 002A       MOV              R0, #0x2A
  227 00000198 F7FF FFFE       BL               LCD_OutChar
  228 0000019C F04F 002A       MOV              R0, #0x2A
  229 000001A0 F7FF FFFE       BL               LCD_OutChar
  230 000001A4 E8BD 1010       POP              {R4, R12}
  231 000001A8 E8BD 4001       POP              {R0, LR}
  232 000001AC 4770            BX               LR
  233 000001AE         
  234 000001AE         printOutFix
  235 000001AE 46EC            MOV              R12, SP
  236 000001B0         loopFix
  237 000001B0 9800            LDR              R0, [SP, #Digit]
  238 000001B2 F100 0030       ADD              R0, #0x30
  239 000001B6 F7FF FFFE       BL               LCD_OutChar
  240 000001BA F105 35FF       ADD              R5, #-1
  241 000001BE B001            ADD              SP, #4      ; Deallocate the lo
                                                            cal variable after 
                                                            usage
  242 000001C0 2D03            CMP              R5, #3
  243 000001C2 D103            BNE              continueFix
  244 000001C4 F04F 002E       MOV              R0, #0x2E   ; Catch the decimal
                                                             after the first pr
                                                            int out
  245 000001C8 F7FF FFFE       BL               LCD_OutChar
  246 000001CC         continueFix
  247 000001CC 2D00            CMP              R5, #0
  248 000001CE D000            BEQ              doneFix
  249 000001D0 E7EE            B                loopFix
  250 000001D2         
  251 000001D2         
  252 000001D2         
  253 000001D2         doneFix
  254 000001D2 E8BD 1010       POP              {R4, R12}
  255 000001D6 E8BD 4020       POP              {R5, LR}
  256 000001DA 4770            BX               LR
  257 000001DC         
  258 000001DC         
  259 000001DC 4770            BX               LR
  260 000001DE         
  261 000001DE         ;* * * * * * * * End of LCD_OutFix * * * * * * * *
  262 000001DE         



ARM Macro Assembler    Page 7 


  263 000001DE         ; ----------------------Mod-----------------------
  264 000001DE         ; Divides number by some multiple of 10 and saves the re
                       mainder
  265 000001DE         ; Inputs:  R0 has dividend
  266 000001DE         ;     R1 has divisor
  267 000001DE         ; Outputs:  R3 has remainder and R2 has quotient
  268 000001DE         Mod
  269 000001DE FBB0 F2F1       UDIV             R2, R0, R1
  270 000001E2 FB02 F301       MUL              R3, R2, R1
  271 000001E6 EBA0 0303       SUB              R3, R0, R3  ; gets least signif
                                                            icant value
  272 000001EA F88D 200E       STRB             R2, [SP, #quo]
  273 000001EE F88D 300F       STRB             R3, [SP, #rem]
  274 000001F2 4770            BX               LR
  275 000001F4         ;* * * * * * * * * End of Mod * * * * * * * * * * *  
  276 000001F4         
  277 000001F4         
  278 000001F4                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  279 000001F4                 END                          ; end of file
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\print.
d -o.\print.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include --predefine="_
_EVAL SETA 1" --list=.\print.lst Print.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 18 in file Print.s
   Uses
      None
Comment: .text unused
BigNum 0000011A

Symbol: BigNum
   Definitions
      At line 176 in file Print.s
   Uses
      At line 145 in file Print.s
Comment: BigNum used once
Done 00000048

Symbol: Done
   Definitions
      At line 65 in file Print.s
   Uses
      At line 62 in file Print.s
Comment: Done used once
LCD_OutDec 00000000

Symbol: LCD_OutDec
   Definitions
      At line 32 in file Print.s
   Uses
      At line 14 in file Print.s
Comment: LCD_OutDec used once
LCD_OutFix 000000A4

Symbol: LCD_OutFix
   Definitions
      At line 128 in file Print.s
   Uses
      At line 15 in file Print.s
Comment: LCD_OutFix used once
Mod 000001DE

Symbol: Mod
   Definitions
      At line 268 in file Print.s
   Uses
      At line 47 in file Print.s
      At line 149 in file Print.s
      At line 154 in file Print.s
      At line 159 in file Print.s

Mod_Div 00000012

Symbol: Mod_Div
   Definitions
      At line 44 in file Print.s
   Uses
      At line 53 in file Print.s
Comment: Mod_Div used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Next 0000002E

Symbol: Next
   Definitions
      At line 54 in file Print.s
   Uses
      At line 46 in file Print.s
Comment: Next used once
Output 00000032

Symbol: Output
   Definitions
      At line 57 in file Print.s
   Uses
      At line 64 in file Print.s
Comment: Output used once
Return 0000013A

Symbol: Return
   Definitions
      At line 187 in file Print.s
   Uses
      At line 175 in file Print.s
Comment: Return used once
continueFix 000001CC

Symbol: continueFix
   Definitions
      At line 246 in file Print.s
   Uses
      At line 243 in file Print.s
Comment: continueFix used once
doneFix 000001D2

Symbol: doneFix
   Definitions
      At line 253 in file Print.s
   Uses
      At line 248 in file Print.s
Comment: doneFix used once
getnum 00000060

Symbol: getnum
   Definitions
      At line 82 in file Print.s
   Uses
      At line 95 in file Print.s
Comment: getnum used once
getnumfix 0000015C

Symbol: getnumfix
   Definitions
      At line 206 in file Print.s
   Uses
      At line 217 in file Print.s
Comment: getnumfix used once
loopFix 000001B0

Symbol: loopFix



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 236 in file Print.s
   Uses
      At line 249 in file Print.s
Comment: loopFix used once
overflowFix 0000017C

Symbol: overflowFix
   Definitions
      At line 219 in file Print.s
   Uses
      At line 202 in file Print.s
Comment: overflowFix used once
printOutDec 00000080

Symbol: printOutDec
   Definitions
      At line 98 in file Print.s
   Uses
      At line 94 in file Print.s
Comment: printOutDec used once
printOutFix 000001AE

Symbol: printOutFix
   Definitions
      At line 234 in file Print.s
   Uses
      At line 216 in file Print.s
Comment: printOutFix used once
read 0000008A

Symbol: read
   Definitions
      At line 103 in file Print.s
   Uses
      At line 92 in file Print.s
      At line 108 in file Print.s

19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

Digit 00000000

Symbol: Digit
   Definitions
      At line 30 in file Print.s
   Uses
      At line 89 in file Print.s
      At line 103 in file Print.s
      At line 212 in file Print.s
      At line 237 in file Print.s

ast 0000002A

Symbol: ast
   Definitions
      At line 138 in file Print.s
   Uses
      At line 178 in file Print.s
      At line 182 in file Print.s

char 00000000

Symbol: char
   Definitions
      At line 35 in file Print.s
   Uses
      None
Comment: char unused
char1 00000004

Symbol: char1
   Definitions
      At line 132 in file Print.s
   Uses
      At line 151 in file Print.s
      At line 165 in file Print.s

char2 00000006

Symbol: char2
   Definitions
      At line 134 in file Print.s
   Uses
      At line 156 in file Print.s
      At line 169 in file Print.s

char3 00000007

Symbol: char3
   Definitions
      At line 135 in file Print.s
   Uses
      At line 161 in file Print.s
      At line 171 in file Print.s

char4 00000008

Symbol: char4
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 136 in file Print.s
   Uses
      At line 163 in file Print.s
      At line 173 in file Print.s

dec 00000005

Symbol: dec
   Definitions
      At line 133 in file Print.s
   Uses
      None
Comment: dec unused
dot 0000002E

Symbol: dot
   Definitions
      At line 137 in file Print.s
   Uses
      At line 167 in file Print.s
      At line 180 in file Print.s

fix 00000000

Symbol: fix
   Definitions
      At line 131 in file Print.s
   Uses
      At line 147 in file Print.s
Comment: fix used once
limit 0000270F

Symbol: limit
   Definitions
      At line 139 in file Print.s
   Uses
      At line 142 in file Print.s
Comment: limit used once
num 0000000A

Symbol: num
   Definitions
      At line 36 in file Print.s
   Uses
      At line 41 in file Print.s
Comment: num used once
quo 0000000E

Symbol: quo
   Definitions
      At line 21 in file Print.s
   Uses
      At line 51 in file Print.s
      At line 272 in file Print.s

rem 0000000F

Symbol: rem
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 22 in file Print.s
   Uses
      At line 48 in file Print.s
      At line 273 in file Print.s

14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

LCD_OutChar 00000000

Symbol: LCD_OutChar
   Definitions
      At line 12 in file Print.s
   Uses
      At line 60 in file Print.s
      At line 102 in file Print.s
      At line 105 in file Print.s
      At line 166 in file Print.s
      At line 168 in file Print.s
      At line 170 in file Print.s
      At line 172 in file Print.s
      At line 174 in file Print.s
      At line 179 in file Print.s
      At line 181 in file Print.s
      At line 183 in file Print.s
      At line 184 in file Print.s
      At line 185 in file Print.s
      At line 221 in file Print.s
      At line 223 in file Print.s
      At line 225 in file Print.s
      At line 227 in file Print.s
      At line 229 in file Print.s
      At line 239 in file Print.s
      At line 245 in file Print.s

LCD_OutString 00000000

Symbol: LCD_OutString
   Definitions
      At line 13 in file Print.s
   Uses
      None
Comment: LCD_OutString unused
2 symbols
366 symbols in table
